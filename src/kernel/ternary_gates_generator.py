#!/usr/bin/env python3
"""
Ternary Gates Generator for TEROS
Generates all 19,683 dyadic ternary functions and 27 monadic functions
"""

import sys

def index_func(a, b):
    """Map trit pair (a,b) to index [0,8]"""
    # Convert {-1,0,+1} to {0,1,2}
    a_idx = a + 1
    b_idx = b + 1
    return a_idx * 3 + b_idx

def decode_base3(number, position):
    """Extract digit at position from base-3 number"""
    return (number // (3 ** position)) % 3

def decode_function(function_id, index):
    """Extract output value for function_id at input index"""
    # Extract digit at position index
    digit = decode_base3(function_id, index)
    # Convert {0,1,2} to {-1,0,+1}
    return digit - 1

def generate_all_dyadic_functions():
    """
    Generate all 19,683 dyadic ternary functions (3^9)
    Each function is a lookup table with 9 entries
    Input combinations: (-1,-1), (-1,0), (-1,+1), (0,-1), (0,0), (0,+1), (+1,-1), (+1,0), (+1,+1)
    """
    print("Generating 19,683 dyadic ternary functions...")
    
    all_functions = []
    
    # Generate all 3^9 = 19,683 functions
    for func_id in range(3 ** 9):
        # Create lookup table for this function
        lookup_table = []
        
        # For each of the 9 input combinations
        for idx in range(9):
            # Extract output from function_id
            output = decode_function(func_id, idx)
            lookup_table.append(output)
        
        all_functions.append(lookup_table)
    
    print(f"Generated {len(all_functions)} dyadic functions")
    return all_functions

def generate_all_monadic_functions():
    """
    Generate all 27 monadic ternary functions (3^3)
    Each function is a lookup table with 3 entries
    Input: -1, 0, +1
    """
    print("Generating 27 monadic ternary functions...")
    
    all_functions = []
    
    # Generate all 3^3 = 27 functions
    for func_id in range(3 ** 3):
        # Create lookup table for this function
        lookup_table = []
        
        # For each of the 3 inputs: -1, 0, +1
        for idx in range(3):
            # Extract output from function_id
            output = decode_function(func_id, idx)
            lookup_table.append(output)
        
        all_functions.append(lookup_table)
    
    print(f"Generated {len(all_functions)} monadic functions")
    return all_functions

def find_common_functions(functions):
    """Identify well-known ternary logic functions"""
    
    # Input pairs in order: (-1,-1), (-1,0), (-1,+1), (0,-1), (0,0), (0,+1), (+1,-1), (+1,0), (+1,+1)
    
    # Kleene AND: min(a,b)
    kleene_and = [-1, -1, -1, -1, 0, 0, -1, 0, 1]
    
    # Kleene OR: max(a,b)
    kleene_or = [-1, 0, 1, 0, 0, 1, 1, 1, 1]
    
    # Consensus (median of a, b, 0)
    consensus = [-1, -1, 0, -1, 0, 0, 0, 0, 1]
    
    # Minority (opposite of consensus)
    minority = [1, 1, 0, 1, 0, 0, 0, 0, -1]
    
    # Plus (ternary addition mod 3)
    plus = [1, -1, 0, -1, 0, 1, 0, 1, -1]
    
    # Times (ternary multiplication)
    times = [1, 0, -1, 0, 0, 0, -1, 0, 1]
    
    catalog = {
        'KLEENE_AND': (kleene_and, 'Min(a,b) - Kleene AND'),
        'KLEENE_OR': (kleene_or, 'Max(a,b) - Kleene OR'),
        'CONSENSUS': (consensus, 'Median(a,b,0) - Consensus'),
        'MINORITY': (minority, 'Minority of three'),
        'PLUS': (plus, 'Ternary addition (a+b mod 3)'),
        'TIMES': (times, 'Ternary multiplication (a*b)'),
    }
    
    # Find function IDs for known functions
    results = {}
    for name, (func, desc) in catalog.items():
        # Search for this function
        for func_id, candidate in enumerate(functions):
            if candidate == func:
                results[name] = (func_id, desc)
                break
    
    return results

def generate_c_header(functions, monadic_functions, catalog, output_file):
    """Generate C header and implementation file"""
    
    print(f"Generating C file: {output_file}...")
    
    with open(output_file, 'w') as f:
        # Header
        f.write("""/**
 * @file ternary_gates_data.c
 * @brief Auto-generated ternary logic gates lookup tables
 * @note This file is auto-generated by ternary_gates_generator.py
 * DO NOT EDIT MANUALLY - regenerate with: python ternary_gates_generator.py
 */

#include "ternary_gates.h"
#include <stdint.h>

// =============================================================================
// DYADIC TERNARY GATES (2 inputs -> 1 output)
// =============================================================================
// 19,683 functions × 9 entries = 177,147 bytes (173 KB)
// 
// Each function is indexed by function_id [0..19682]
// Each function has 9 entries for input combinations:
//   (-1,-1), (-1,0), (-1,+1), (0,-1), (0,0), (0,+1), (+1,-1), (+1,0), (+1,+1)
//
// To evaluate f(a,b):
//   1. Compute index = (a+1)*3 + (b+1)  [maps to 0..8]
//   2. Lookup: result = TERNARY_DYADIC_GATES[function_id][index]
//
// =============================================================================

// Lookup table for all 19,683 dyadic ternary functions
const int8_t TERNARY_DYADIC_GATES[19683][9] = {
""")
        
        # Write dyadic functions
        for func_id, lookup_table in enumerate(functions):
            f.write("    {")
            for i, val in enumerate(lookup_table):
                if i > 0:
                    f.write(", ")
                f.write(f"{val:+d}")
            f.write("}")
            if func_id < len(functions) - 1:
                f.write(",")
            f.write("\n")
        
        f.write("""};

// =============================================================================
// MONADIC TERNARY GATES (1 input -> 1 output)
// =============================================================================
// 27 functions × 3 entries = 81 bytes
//
// Each function is indexed by function_id [0..26]
// Each function has 3 entries for inputs: -1, 0, +1
//
// To evaluate f(a):
//   1. Compute index = a + 1  [maps -1,0,+1 to 0,1,2]
//   2. Lookup: result = TERNARY_MONADIC_GATES[function_id][index]
//
// =============================================================================

// Lookup table for all 27 monadic ternary functions
const int8_t TERNARY_MONADIC_GATES[27][3] = {
""")
        
        # Write monadic functions
        for func_id, lookup_table in enumerate(monadic_functions):
            f.write("    {")
            for i, val in enumerate(lookup_table):
                if i > 0:
                    f.write(", ")
                f.write(f"{val:+d}")
            f.write("}")
            if func_id < len(monadic_functions) - 1:
                f.write(",")
            f.write("\n")
        
        f.write("""};

// =============================================================================
// FUNCTION IDENTIFIERS FOR COMMON FUNCTIONS
// =============================================================================

""")
        
        # Write catalog
        for name, (func_id, desc) in catalog.items():
            f.write(f"// {desc}\n")
            f.write(f"#define T3_GATE_{name} {func_id}\n\n")
        
        f.write("""
// =============================================================================
// STATISTICS
// =============================================================================

const uint32_t T3_DYADIC_FUNCTION_COUNT = 19683;
const uint32_t T3_MONADIC_FUNCTION_COUNT = 27;
const uint32_t T3_DYADIC_TABLE_SIZE = 19683 * 9 * sizeof(int8_t);  // 177,147 bytes
const uint32_t T3_MONADIC_TABLE_SIZE = 27 * 3 * sizeof(int8_t);    // 81 bytes
const uint32_t T3_TOTAL_TABLE_SIZE = T3_DYADIC_TABLE_SIZE + T3_MONADIC_TABLE_SIZE;  // 177,228 bytes (~173 KB)
""")

def main():
    print("=" * 70)
    print("TEROS Ternary Gates Generator")
    print("=" * 70)
    print()
    
    # Generate all functions
    dyadic_functions = generate_all_dyadic_functions()
    monadic_functions = generate_all_monadic_functions()
    
    # Find well-known functions
    print("\nIdentifying common functions...")
    catalog = find_common_functions(dyadic_functions)
    
    print("\nFound common functions:")
    for name, (func_id, desc) in catalog.items():
        print(f"  {name:20s} = {func_id:5d}  - {desc}")
    
    # Generate C file
    output_file = "ternary_gates_data.c"
    generate_c_header(dyadic_functions, monadic_functions, catalog, output_file)
    
    print(f"\n[OK] Successfully generated {output_file}")
    print(f"   - {len(dyadic_functions)} dyadic functions (173 KB)")
    print(f"   - {len(monadic_functions)} monadic functions (81 bytes)")
    print(f"   - Total size: 177,228 bytes (~173 KB)")
    print()
    print("Next step: Compile and integrate into kernel")

if __name__ == "__main__":
    main()

